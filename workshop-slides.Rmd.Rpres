test-slides.Rmd
========================================================
author: 
date: 
autosize: true

R Workshop
========================================================

WHO AM I
========================================================

WHO ARE YOU
========================================================

What Is R?
========================================================
incremental: true

- It's a *programming language* for statistical computing and visualization
- You can think of it as a *domain specific language* for stats and visualization, like Rails is for web development.

Why R?
========================================================

Other software
========================================================
incremental: true

- Python
- Julia
- Tableau
- PowerBI etc

PYTHON IS BETTER (usually)
========================================================

RStudio
========================================================

Rstudio cloud
========================================================   
 https://rstudio.cloud

R ITSELF
========================================================
incremental: true

```{r}
1 + 2
```


Making Dice
========================================================
incremental: true

```{r}
dice <- c(1,2,3,4,5,6)
dice
dice <- 1:6
dice
```
- These are *vectors*, which is what R calls one-dimensional lists of things.
- What's with the weird "<-" thing? Why not *=* as in every other language ever invented in the history of languages?

What are functions?
========================================================

Let's make a function!
========================================================
incremental: true

```{r}
hello <- function(name="Access Attendee") {
  paste("Hello, ", name, "!", sep="")
}
hello()
```
- Let's break this down:
- *hello* -- the name of the function. This is an arbitrary name and can be almost anything.
- <- the assignment operator
- *function* - telling R we are building a function
- *name* - a variable to pass to the function. Functions can have multiple variables!
- *paste* - to *concatenate* vectors
- "Hello, " a string
- *name* again - the variable for the function. It can change!
- "!", another string the end of our sentence.
- *sep*, a flag for paste to tell it what the separator is. In this case, we don't want any separator.
- Why did I write this function with "Access Attendee" in it?
- How can we run this and change the name?




Rolling the Dice
========================================================
incremental: true

```{r}
roll <- function(die = 1:6, rolls = 2) {
  dice <-sample(die, size = rolls)
  dice
}
roll()
```
- How can we change the number of dice sides? The number of rolls?
- Roll the dice a few times. Can you spot anything weird?

Fixing our Dice
========================================================
incremental: true

```{r}
roll <- function(die = 1:6, rolls = 2) {
  dice <- sample(die, size = rolls, replace = TRUE)
  dice
}
roll()
```

Let's make the function do the adding
========================================================
```{r}
roll <- function(die = 1:6, rolls = 2) {
  dice <- sample(die, size = rolls, replace = TRUE)
  sum(dice)
}
roll()
```

Let's make graphs!
========================================================

What are packages?
========================================================
```{r, eval=FALSE}
install.packages("tidyverse")
library(tidyverse)
```

Quick and Dirty Plotting with a Single Vector
========================================================
```{r, echo=FALSE}
library(tidyverse)
```

```{r}
qplot(c(1,2,2,2,4,4,4,5,5,7,10))
```

Quick and Dirty Plotting with Two Vectors
========================================================
```{r}
x <- c(1,3,3,5,6,7,7,7,8,9,9,10)
y <- c(2,2,2,5,7,8,9,2,2,3,3,9)
qplot(x,y)
```


Rolling many times
========================================================
incremental: true

```{r}
replicate(10, roll())
```
- What happens if we change the first variable? 
- Can we adjust the parameters of roll()?

Plotting dice rolls
========================================================
incremental: true

```{r}
rolls <- replicate(10000, roll())
```

Plotting dice rolls 2
========================================================

```{r, eval=FALSE}
qplot(rolls, binwidth=1)
```

Plotting dice rolls 3
========================================================
```{r, echo=FALSE}
qplot(rolls, binwidth=1)
```

Let's cheat
========================================================
```{r}
rollcheat <- function(die = 1:6, rolls = 2) {
  dice <- sample(die, size = rolls, replace = TRUE, prob = c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))
  sum(dice)
}
rollcheat()
```

Plotting cheating rolls
========================================================
```{r, eval=FALSE}
cheatrolls <- replicate(10000, rollcheat())
qplot(cheatrolls, binwidth = 1)
```
- What is the graph going to look like now?

WE ARE ALL NOW MILLIONAIRES
========================================================
title: false

```{r, echo=FALSE}
cheatrolls <- replicate(10000, rollcheat())
qplot(cheatrolls, binwidth = 1)
```

cars, they suck
========================================================
incremental: true 
```{r}
mpg
```
- *mpg* is a *data frame* or, in Tidyverse-speak, a *tibble*
- ....but it's basically a spreadsheet.


cars, they suck #3
========================================================
```{r, eval=FALSE}
View(mpg)
```

cars, they suck #4
========================================================
incremental: true

- How can we determine the median highway gas mileage?
```{r}
median(mpg %>% pull(9))
```
- breaking this down:
- *median* -- (a function, to which we pass a vector)
- *mpg* -- (our dataset)
- *%>%* --  a "pipe" through which data is passed (from tidyverse/magrittr)
- *pull* -- a function to convert a table to a vector
- *9* -- we want to convert the ninth column of the *mpg* dataset, which is "hwy".
- You can make this *without* the weird *%>%* pipe thing, but using pipes (usually) makes code much more readable.


How to make graphs if you have no art in your soul
========================================================
```{r, eval=FALSE}
library(tidyverse)
?ggplot
```

ggplot
========================================================
incremental: true

- The "gg" stands for *grammar of graphics*
- ggplots are built out of two basic pieces
- the *dataset*, like *mpg*
- the "geom", how to draw the dataset.

ggplot #2
========================================================
incremental: true

```{r, eval=FALSE}
ggplot(mpg)
```
- What will this do?
- *Why* did it do that?





